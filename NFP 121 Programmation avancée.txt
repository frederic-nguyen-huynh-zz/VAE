NFP 121 Programmation avancée

En tant que lead developer Client chez IsCool Entertainment, au sein de l'équipe "Multi-joueur", j'ai la responsabilité du bon fonctionnement de la partie client de nos jeux, de leur achitecture, ainsi que de la mise en place des outils permettant de facilité ou de rationnaliser le travail des autres développeur. L'équipe de développeur au sein de laquelle j'évolue comprend 5 personnes, 2 developpeurs "client", dont moi, 1 développeur JAVA qui à la charge de la partie "game server", qui comprend le gameplay des jeux, et 2 développeurs .NET qui s'occupent de la partie Web et portail. Nos jeux sont des applications Facebook. La partie .NET se permet d'afficher la page avec un client flash et gère l'ensemble de la partie dite "sociale". Le client Flash est connecté de manière persistente au game server (par socket). Nous avons à l'heure actuelle deux jeux en production, que nous faisons évoluer de manière itérative: un jeu de Belote et un jeu proche d'un scrabble. Les joueurs peuvent effectuer des parties à plusieurs, d'où l'importance de maintenir une connexion persistante, et d'avoir une optimisation tant dans l'affichage que deans la gestion du gameplay - que ce soit côté client que serveur - afin de ne pas nuire à la fluidité du jeu.

1/ Le développement client

Je suis arrivé dans l'équipe Multi-joueur fin 2010. A cette époque, le développement de la partie cilent est balbutiante. L'écosystème Flash permet d'écrire des morceaux de script au milieu de la conception graphique, ce qui nuit fortement à sa compréhension. Cependant, ce fût le choix pris par les développeurs me précédant, en raison de leurs propres habitudes. Qui plus est, la livraison était totalement manuelle. Le "release manager" compilait le programme sur son poste de travail, et le mettant en ligne par un copier/coller sur le serveurs de fichiers des environnements de tests ou de production. La programmation se faisait à la demande, en "fixant" des morceaux de code, quitte à rendre opaque l'architecture globale du client.

1.1/ Mise en place de la compilation automatisée

La première action que j'ai menée est l'automatisation de la compilation du client. En effet, on ne peut pas considérer qu'un logiciel compilé sur le poste d'un développeur - qui est forcément configuré pariculièrement - soit une opération saine. Selon les différents postes, un programme risque de fonctionner ou pas. L'exemple bête est la présence de lien vers une ressource (images, scripts, ...) dont l'emplacement est fournie dans le code "en dur". Lancé sur le poste d'un développeur, cela fonctionnera. Sur un autre poste, si la ressource n'est pas disponible, cela deviendra source de bug, voir le programme ne pourra plus compiler.

La compilation automatisée est le premier pas vers un serveur de compilation. Cet environnement "neutre" est considéré comme la référence de compilation. Si le serveur de compilation "s'allume en rouge", le développeur reprend son code immédiatement. De plus, ce serveur de compilation sera le support pour la mise en place des tests à automatiser: tests unitaires, validation de l'intégrité de code, analyse de la couverture du code par les tests, voir déploiement.

Pour automatiser le processus de compilation, j'ai fait appel à un outil issu du monde JAVA, nommé "Maven". A l'aide d'un plugin ("FlexMojo"), on peut compiler du code Actionscript en utilisant le support de vie d'un projet offert par Maven. (Maven offre des moyen simple de valider les dépendances à d'autres bibliothèques, d'effectuer la compilation, les tests unitaires, de livrer les artefacts de compilation, ainsi que fournir une analyse du programme).

Une fois le client compilable par Maven, et non plus par Flash, la mise en place du serveur a été simple. Il ne s'agit plus qu'à cette étape de paramétrage. Comme premier choix de serveur de compilation, j'ai choisi Hudson, celui-ci était gratuit. Aujourd'hui, nous avons pu basculer vers une solution payante mais offrant plus de fonctionnalités, à savoir Teamcity.


1.2/ Refonte de l'architecture

1.2.1/ Première base UML du client



1.2.2/ Utilisation de MVC, mise en place d'une couche network au sein du client

1.2.3/ Mise en place des tests unitaires et de l'injection de dépendances

1.2.4/ Refactoring, extraction de comportements, lien avec des design patterns et autre patterns de conception

1.2.5/ Mise en place d'un framework MVC orienté injection automatisée

1.3/ A propos de la programmation événementielle



2/ La mise en place des outils client/serveur

2.1/ Le générateur de protocole client/serveur



2.1/ Analyseur de statistiques client







1: Actionscript: Tests unitaires, Programmation événementielle, pattern de conception, rélfexivité, injection des dépendances, méthodes de développement par UML

2: JAVA: Structure primitive, thread, primitivfs et polymorphisme, généricité et collection, entrée et sorties, xml et java, programmation réseau

